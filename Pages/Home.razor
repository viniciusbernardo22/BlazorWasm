@page "/"

@inject ICategoryService service;

<PageTitle>Categorias</PageTitle>

<h1>Categorias</h1>

@if (_categories is null)
{
    <p>Loading...</p>
}
else
{
    <table class="table table-hover">
        <thead >
        <tr>
            <th>Id</th>
            <th>Title</th>
            <th>Description</th>
            <th>Actions</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var category in _categories)
        {
            <tr>
                <th>@category.Id</th>
                <th>@category.Title</th>
                <th>@category.Description</th>
                <th>
                    <button class="btn btn-info" @onclick="() => GetById(category.Id)">Edit</button>
                    <button class="btn btn-danger" @onclick="() => DeleteCategory(category.Id)">Delete</button>
                </th>
            </tr>
        }

        </tbody>
    </table>
}

<hr>

<form @onsubmit="SaveCategory">
    <div class="form-group">
        <label for="Id">Id</label>
        <input type="number" class="form-control" id="Id" @bind="_category.Id" readonly/>
        <small id="emailHelp" class="form-text text-muted">Category's Id</small>
    </div>
    <div class="form-group">
        <label for="title">Title</label>
        <input type="text" class="form-control" id="title" @bind="_category.Title"/>
        <small id="emailHelp" class="form-text text-muted">Category's title</small>
    </div>
    <div class="form-group">
        <label for="description">Description</label>
        <input type="text" class="form-control" id="description" @bind="_category.Description"/>
    </div>
    <hr>
    <button type="submit" class="btn btn-primary">
        @(_category.Id > 0 ? "Salvar" : "Adicionar")
    </button>
</form>

@code {
    private List<Category>? _categories;
    private Category? _category = new();

    protected override async Task OnInitializedAsync()
    {
        _categories = await service.GetAllCategoriesAsync();
    }

    async Task SaveCategory()
    {
        if (_category?.Id == 0)
        {
            var newCategory = await service.CreateNewCategoryAsync(_category);

            if (newCategory is not null)
                _categories.Add(newCategory);
        }
        else
        {
            await service.EditCategory(_category);

            var category = _categories.FirstOrDefault(x => x.Id == _category.Id);
            if (category is not null)
                category.Title = _category.Title;
            category.Description = _category.Description;
        }
    }

    async void GetById(int Id)
    {
        if (Id == _category.Id)
            return;

        var category = await service.GetCategoryById(Id);

        if (category is not null)
            _category = category;
    }

    async void DeleteCategory(int Id)
    {
        await service.DeleteCategory(Id);

        _categories?.RemoveAll(cat => cat.Id == Id);
    }

}